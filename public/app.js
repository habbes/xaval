!function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t){const i="\n// Xaval is a playground for experimenting with computer vision using OpenCV\n\n// To get started, import an image from the bottom-left\n// Use `imsource.read()` to load the imported image into an OpenCV array\nconst img = imsource.read();\n// Do some image processing and manipulation using OpenCV\ncv.cvtColor(img, img, cv.COLOR_RGBA2GRAY, 0);\n// Then, to display an image, use `imviewer.show()`\nimviewer.show(img);\n\n// don't forget to clean up the memory\nimg.delete();\n\n// When you're ready, click the \"Run\" button\n\n// To learn more about OpenCV for JS,\n// check out the tutorials at\n// https://docs.opencv.org/3.4.1/d5/d10/tutorial_js_root.html\n";window.init=function(){const e=new n(document.querySelector("#editorContainer")),t=new o(document.querySelector("#imageViewer")),i=new s(document.querySelector("#imageSource"));return new r({editor:e,imageSource:i,imageViewer:t})};class r{constructor(e){this.editor=e.editor,this.imageSource=e.imageSource,this.imageViewer=e.imageViewer}start(){this.editor.setRunHandler(e=>{const t=this.runCode(e);console.log("Code result",t)}),this.editor.editor.focus()}runCode(e){return Function("imsource","imviewer",`"use strict";${e}`)(this.imageSource,this.imageViewer)}}class n{constructor(e){this.container=e,this.editorEl=e.querySelector("#editor"),this.editor=ace.edit(this.editorEl),this.editor.setValue(i),this.editor.setTheme("ace/theme/monokai"),this.editor.session.setMode("ace/mode/javascript"),this.editor.setShowPrintMargin(!1),this.editor.clearSelection(),this.runBtn=e.querySelector("button"),this.run=this.run.bind(this),this.runBtn.addEventListener("click",this.run)}setRunHandler(e){this.runHandler=e}get source(){return this.editor.getValue()}run(){this.runHandler&&this.runHandler(this.source)}}class o{constructor(e){this.el=e,this.canvas=e.querySelector(".canvas"),this.canvas.id=`canvas${o.nextId()}`}static nextId(){return o._nextId=(o._nextId||0)+1,o._nextId}show(e){cv.imshow(this.canvas.id,e)}}class s{constructor(e){this.el=e,this.thumbnail=e.querySelector("img"),this.image=new Image,this.inputEl=e.querySelector("input"),this.inputEl.addEventListener("change",e=>{this.thumbnail.src=URL.createObjectURL(e.target.files[0]),this.image.src=this.thumbnail.src},!1)}read(){return cv.imread(this.image)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,